syntax = "proto3";

package fastchain;


//Interface exposed by pbft committee nodes
service FastChain {
    //Send new transaction to presumed leader node
    rpc NewTxnRequest (Transaction) returns (GenericResp) {}
    // rpc BroadcastByGRPC (Request) returns (GenericResp) {}
    rpc Check (Request) returns (GenericResp) {}
    rpc Send (Request) returns (GenericResp) {}
}

// //Interface exposed by client
// service Client {
//         //RPC service that responds whether the node is the leader
//         // rpc CheckLeader (CheckLeaderReq) returns (CheckLeaderResp) {}
        
//         //Send new transaction to presumed leader node
//         rpc NewTxnRequest (Transaction) returns (GenericResp) {}
// }

service ClientReceiver {
    //RPC service that responds whether the node is the leader
    // rpc CheckLeader (CheckLeaderReq) returns (CheckLeaderResp) {}
    
    //Send new transaction to presumed leader node
    rpc PbftReplyReceiver (PbftBlock) returns (Empty) {}
    rpc Check (GenericResp) returns (GenericResp) {}
}


message Request {
    message Inner {
        int32 id = 1; //from
        int32 seq = 2;
        int32 view = 3;
        string type = 4;
        PbftBlock block = 5;
        int32 timestamp = 6;
    }

    // message MsgSignature {
    //         bytes r = 1;
    //         bytes s = 2;
    // }

    Inner inner = 1;
    bytes dig = 2;
    // MsgSignature sig = 3;
    bytes sig = 3;
    bytes outer = 4;
    int32 dest = 5;
}

message History {
    repeated Request req = 1;
}

message CheckLeaderReq {}
message CheckLeaderResp {
        bool message = 1;
}

message Nodes {
    repeated TruePbftNode nodes = 1;
}

message TxnData {
    uint64 AccountNonce       	 = 1; // Nonce
    int64  Price 	     	 = 2; // Gas Price
    int64  GasLimit		 = 3; // start gas?? 
    bytes  Recipient		 = 4; // to
    int64  Amount 		 = 5; // value
    Payload  payload		 = 6; // data, change this to string
    
    int64  V 			 = 7;
    int64  R			 = 8;
    int64  S			 = 9;

    bytes Hash			 = 10; // ?? 
}

// there should be various payload types defined. 
// Protocol buffers picked up on the basis of request types

message Payload  {
    string txnType  =1;
    int32 votecount = 2;
}

message Transaction {
    TxnData data 		 = 1;
    int32 dest             = 2; // momentary hack, succour for node_instances[NODE_ID]
    int32 source           = 3; // momentary hack, succour for node_instances[NODE_ID]
}

message Transactions {
    repeated Transaction txns = 1;
}

message PbftBlockHeader {
    int64  Number 	= 1;
    int64  GasLimit     = 2;
    int64  GasUsed	= 3;
    int64  Time		= 4;
}

message PbftBlock {
    PbftBlockHeader   header    = 1;
    Transactions      txns      = 2;
    repeated string   signs     = 3;   
}

message TruePbftNode {
    string addr	     = 1;
    string pubkey    = 2;
    string privkey   = 3;
}

message TrueChain {
    repeated PbftBlock blocks   = 1;
    PbftBlockHeader  lastHeader = 2;
}

message GenericResp {
    string msg = 1;
    int32  status = 2;
}

message Empty {

}